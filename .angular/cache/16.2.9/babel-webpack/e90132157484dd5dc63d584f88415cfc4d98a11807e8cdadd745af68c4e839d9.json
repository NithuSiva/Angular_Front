{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ni2/Documents/Angular_Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n// import { TicketService } from '../ticket/ticket.service';\nexport let StudentService = class StudentService {\n  _httpClient;\n  ticketService;\n  studentList = [];\n  students$ = new BehaviorSubject([]);\n  studentHasBeenAdded = new EventEmitter();\n  studentHasBeenDeleted = new EventEmitter();\n  url = \"https://jsonplaceholder.typicode.com/users\";\n  studentListApi;\n  constructor(_httpClient, ticketService) {\n    this._httpClient = _httpClient;\n    this.ticketService = ticketService;\n  }\n  getData() {\n    let urlBackEnd = \"http://localhost:3000/api/students\";\n    return this._httpClient.get(urlBackEnd);\n  }\n  httpGetStudents() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let urlBackEnd = \"http://localhost:3000/api/students\";\n      try {\n        yield _this._httpClient.get(urlBackEnd).subscribe(data => {\n          _this.studentListApi = data;\n          _this.studentListApi.forEach(element => {\n            let newStudent = {\n              'id': element['studentId'],\n              'firstName': element['firstName'],\n              'lastName': element['lastName']\n            };\n            _this.studentList.push(newStudent);\n          });\n          _this.students$.next(_this.studentList);\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP GET\");\n        throw error;\n      }\n    })();\n  }\n  httpPostStudent(data) {\n    let urlBackEndAddStudent = \"http://localhost:3000/api/students/ajouter\";\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    try {\n      this._httpClient.post(urlBackEndAddStudent, {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        studentId: data.id\n      }).subscribe(res => {\n        let newStudent = {\n          'id': data.id,\n          'firstName': data.firstName,\n          'lastName': data.lastName\n        };\n        console.log(\"NEW STUDENT : \", newStudent);\n        this.studentList.push(newStudent);\n        this.students$.next(this.studentList);\n        this.studentHasBeenAdded.emit(newStudent);\n      });\n    } catch (error) {\n      console.error(\"Erreur HTTP POST\");\n      throw error;\n    }\n  }\n  httpDeleteStudent(id) {\n    console.log(\"httpDeleteStudent : \", id);\n    // this.ticketService.httpDeleteTicket(id);\n    let urlBackEndAddStudent = \"http://localhost:3000/api/students/supprimer/\" + id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    try {\n      this._httpClient.delete(urlBackEndAddStudent).subscribe(res => {\n        this.studentHasBeenDeleted.emit();\n      });\n    } catch (error) {\n      console.error(\"Erreur HTTP POST\");\n      throw error;\n    }\n  }\n  // handleError(arg0: string, data: any): (err: any, caught: Observable<any>) => import(\"rxjs\").ObservableInput<any> {\n  //     throw new Error('Method not implemented.');\n  // }\n  getLastId() {\n    return this.studentList.length;\n  }\n  getStudentsSubject() {\n    return this.students$;\n  }\n  addStudent(student) {\n    // this.students$.value.push(student);\n    this.studentList.push(student);\n    this.students$.next(this.studentList);\n  }\n  getApiAndClearStudent() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2._httpClient.get(_this2.url).subscribe(data => {\n          _this2.studentListApi = data;\n          _this2.studentListApi.forEach(element => {\n            let temp = element['name'].split(' ');\n            let newStudent = {\n              'id': element['id'],\n              'firstName': temp[0],\n              'lastName': temp[1]\n            };\n            _this2.studentList.push(newStudent);\n          });\n          _this2.students$.next(_this2.studentList);\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP GET\");\n        throw error;\n      }\n    })();\n  }\n};\nStudentService = __decorate([Injectable({\n  providedIn: 'root'\n})], StudentService);","map":{"version":3,"names":["HttpHeaders","EventEmitter","Injectable","BehaviorSubject","StudentService","_httpClient","ticketService","studentList","students$","studentHasBeenAdded","studentHasBeenDeleted","url","studentListApi","constructor","getData","urlBackEnd","get","httpGetStudents","_this","_asyncToGenerator","subscribe","data","forEach","element","newStudent","push","next","error","console","httpPostStudent","urlBackEndAddStudent","headers","post","firstName","lastName","studentId","id","res","log","emit","httpDeleteStudent","delete","getLastId","length","getStudentsSubject","addStudent","student","getApiAndClearStudent","_this2","temp","split","__decorate","providedIn"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\student\\student.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError  } from 'rxjs';\r\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\r\nimport { Student } from 'src/models/student';\r\n// import { TicketService } from '../ticket/ticket.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class StudentService {\r\n\r\n    public studentList: Student[] = [];\r\n\r\n    public students$: BehaviorSubject<any[]> = new BehaviorSubject<any>([]);\r\n\r\n    public studentHasBeenAdded: EventEmitter<Student> = new EventEmitter<Student>();\r\n\r\n    public studentHasBeenDeleted: EventEmitter<Student> = new EventEmitter<Student>();\r\n\r\n\r\n    public url: string = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\n    private studentListApi: any;\r\n\r\n    constructor(private _httpClient: HttpClient, public ticketService: TicketService) {\r\n    }\r\n\r\n    getData(): Observable<any> {\r\n        let urlBackEnd = \"http://localhost:3000/api/students\";\r\n        return this._httpClient.get<any>(urlBackEnd);\r\n    }\r\n\r\n    async httpGetStudents(): Promise<void> {\r\n        let urlBackEnd = \"http://localhost:3000/api/students\";\r\n        try {\r\n            await this._httpClient.get(urlBackEnd)\r\n            .subscribe(data => {\r\n                this.studentListApi= (<any>data);\r\n                this.studentListApi.forEach((element: any) => {\r\n                    let newStudent: Student = {'id' :element['studentId'], 'firstName': element['firstName'], 'lastName': element['lastName']};\r\n                    this.studentList.push(newStudent);\r\n                });\r\n                this.students$.next(this.studentList);\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP GET\");\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    httpPostStudent(data: any){\r\n        let urlBackEndAddStudent = \"http://localhost:3000/api/students/ajouter\";\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        try {\r\n            this._httpClient.post<any>(urlBackEndAddStudent, {firstName: data.firstName, lastName: data.lastName, studentId: data.id})\r\n            .subscribe(res => {\r\n                let newStudent: Student = {'id' :data.id, 'firstName': data.firstName, 'lastName': data.lastName};\r\n                console.log(\"NEW STUDENT : \", newStudent)\r\n                this.studentList.push(newStudent);\r\n                this.students$.next(this.studentList);\r\n                this.studentHasBeenAdded.emit(newStudent);\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP POST\");\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    httpDeleteStudent(id: any){\r\n        console.log(\"httpDeleteStudent : \", id);\r\n        // this.ticketService.httpDeleteTicket(id);\r\n        let urlBackEndAddStudent = \"http://localhost:3000/api/students/supprimer/\" + id;\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        try {\r\n            this._httpClient.delete<any>(urlBackEndAddStudent)\r\n            .subscribe(res => {\r\n                this.studentHasBeenDeleted.emit();\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP POST\");\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    // handleError(arg0: string, data: any): (err: any, caught: Observable<any>) => import(\"rxjs\").ObservableInput<any> {\r\n    //     throw new Error('Method not implemented.');\r\n    // }\r\n\r\n    getLastId(){\r\n        return this.studentList.length;\r\n    }\r\n\r\n    getStudentsSubject() {\r\n        return this.students$;\r\n    }\r\n\r\n    addStudent(student: Student) {\r\n        // this.students$.value.push(student);\r\n        this.studentList.push(student);\r\n        this.students$.next(this.studentList);\r\n    }\r\n\r\n    async getApiAndClearStudent(): Promise<void>{\r\n        try {\r\n            await this._httpClient.get(this.url)\r\n            .subscribe(data => {\r\n                this.studentListApi= (<any>data);\r\n                this.studentListApi.forEach((element: any) => {\r\n                    let temp = element['name'].split(' ');\r\n                    let newStudent: Student = {'id' :element['id'], 'firstName': temp[0], 'lastName': temp[1]};\r\n                    this.studentList.push(newStudent);\r\n\r\n                    \r\n                });\r\n                this.students$.next(this.studentList);\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP GET\");\r\n            throw error;\r\n        }\r\n    }\r\n} \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}