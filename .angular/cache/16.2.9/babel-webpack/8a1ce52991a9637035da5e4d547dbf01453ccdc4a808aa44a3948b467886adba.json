{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ni2/Documents/Angular_Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StudentService = /*#__PURE__*/(() => {\n  class StudentService {\n    _httpClient;\n    studentList = [];\n    students$ = new BehaviorSubject([]);\n    studentHasBeenAdded = new EventEmitter();\n    url = \"https://jsonplaceholder.typicode.com/users\";\n    studentListApi;\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n    }\n    getBackEndStudentList() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let urlBackEnd = \"http://localhost:3000/api/students\";\n        try {\n          yield _this._httpClient.get(urlBackEnd).subscribe(data => {\n            _this.studentListApi = data;\n            _this.studentListApi.forEach(element => {\n              let newStudent = {\n                'id': element['studentId'],\n                'firstName': element['firstName'],\n                'lastName': element['lastName']\n              };\n              _this.studentList.push(newStudent);\n            });\n            _this.students$.next(_this.studentList);\n          });\n        } catch (error) {\n          console.error(\"Erreur HTTP GET\");\n          throw error;\n        }\n      })();\n    }\n    getData() {\n      let urlBackEnd = \"http://localhost:3000/api/students\";\n      return this._httpClient.get(urlBackEnd);\n    }\n    backEndAddStudent(data) {\n      let urlBackEndAddStudent = \"http://localhost:3000/api/students/receive\";\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      try {\n        this._httpClient.post(urlBackEndAddStudent, {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          studentId: data.id\n        }).subscribe(res => {\n          let newStudent = {\n            'id': data.id,\n            'firstName': data.firstName,\n            'lastName': data.lastName\n          };\n          console.log(\"NEW STUDENT : \", newStudent);\n          this.studentList.push(newStudent);\n          this.students$.next(this.studentList);\n          this.studentHasBeenAdded.emit(newStudent);\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP POST\");\n        throw error;\n      }\n    }\n    handleError(arg0, data) {\n      throw new Error('Method not implemented.');\n    }\n    getLastId() {\n      return this.studentList.length;\n    }\n    getStudentsSubject() {\n      return this.students$;\n    }\n    addStudent(student) {\n      // this.students$.value.push(student);\n      this.studentList.push(student);\n      this.students$.next(this.studentList);\n    }\n    getApiAndClearStudent() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2._httpClient.get(_this2.url).subscribe(data => {\n            _this2.studentListApi = data;\n            _this2.studentListApi.forEach(element => {\n              let temp = element['name'].split(' ');\n              let newStudent = {\n                'id': element['id'],\n                'firstName': temp[0],\n                'lastName': temp[1]\n              };\n              _this2.studentList.push(newStudent);\n            });\n            _this2.students$.next(_this2.studentList);\n          });\n        } catch (error) {\n          console.error(\"Erreur HTTP GET\");\n          throw error;\n        }\n      })();\n    }\n    static ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return StudentService;\n})();","map":{"version":3,"names":["HttpHeaders","EventEmitter","BehaviorSubject","StudentService","_httpClient","studentList","students$","studentHasBeenAdded","url","studentListApi","constructor","getBackEndStudentList","_this","_asyncToGenerator","urlBackEnd","get","subscribe","data","forEach","element","newStudent","push","next","error","console","getData","backEndAddStudent","urlBackEndAddStudent","headers","post","firstName","lastName","studentId","id","res","log","emit","handleError","arg0","Error","getLastId","length","getStudentsSubject","addStudent","student","getApiAndClearStudent","_this2","temp","split","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\student\\student.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError  } from 'rxjs';\r\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\r\nimport { Student } from 'src/models/student';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class StudentService {\r\n\r\n    public studentList: Student[] = [];\r\n\r\n    public students$: BehaviorSubject<any[]> = new BehaviorSubject<any>([]);\r\n\r\n    public studentHasBeenAdded: EventEmitter<Student> = new EventEmitter<Student>();\r\n\r\n    public url: string = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\n    private studentListApi: any;\r\n\r\n    constructor(private _httpClient: HttpClient) {\r\n    }\r\n\r\n    async getBackEndStudentList(): Promise<void> {\r\n        let urlBackEnd = \"http://localhost:3000/api/students\";\r\n        try {\r\n            await this._httpClient.get(urlBackEnd)\r\n            .subscribe(data => {\r\n                this.studentListApi= (<any>data);\r\n                this.studentListApi.forEach((element: any) => {\r\n                    let newStudent: Student = {'id' :element['studentId'], 'firstName': element['firstName'], 'lastName': element['lastName']};\r\n                    this.studentList.push(newStudent);\r\n                });\r\n                this.students$.next(this.studentList);\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP GET\");\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    getData(): Observable<any> {\r\n        let urlBackEnd = \"http://localhost:3000/api/students\";\r\n        return this._httpClient.get<any>(urlBackEnd);\r\n      }\r\n\r\n    backEndAddStudent(data: any){\r\n        let urlBackEndAddStudent = \"http://localhost:3000/api/students/receive\";\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        try {\r\n            this._httpClient.post<any>(urlBackEndAddStudent, {firstName: data.firstName, lastName: data.lastName, studentId: data.id})\r\n            .subscribe(res => {\r\n                let newStudent: Student = {'id' :data.id, 'firstName': data.firstName, 'lastName': data.lastName};\r\n                console.log(\"NEW STUDENT : \", newStudent)\r\n                this.studentList.push(newStudent);\r\n                this.students$.next(this.studentList);\r\n                this.studentHasBeenAdded.emit(newStudent);\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP POST\");\r\n            throw error;\r\n        }\r\n    }\r\n    handleError(arg0: string, data: any): (err: any, caught: Observable<any>) => import(\"rxjs\").ObservableInput<any> {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    getLastId(){\r\n        return this.studentList.length;\r\n    }\r\n\r\n    getStudentsSubject() {\r\n        return this.students$;\r\n    }\r\n\r\n    addStudent(student: Student) {\r\n        // this.students$.value.push(student);\r\n        this.studentList.push(student);\r\n        this.students$.next(this.studentList);\r\n      }\r\n\r\n    async getApiAndClearStudent(): Promise<void>{\r\n        try {\r\n            await this._httpClient.get(this.url)\r\n            .subscribe(data => {\r\n                this.studentListApi= (<any>data);\r\n                this.studentListApi.forEach((element: any) => {\r\n                    let temp = element['name'].split(' ');\r\n                    let newStudent: Student = {'id' :element['id'], 'firstName': temp[0], 'lastName': temp[1]};\r\n                    this.studentList.push(newStudent);\r\n\r\n                    \r\n                });\r\n                this.students$.next(this.studentList);\r\n            }\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Erreur HTTP GET\");\r\n            throw error;\r\n        }\r\n    }\r\n} \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}