{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StudentService = /*#__PURE__*/(() => {\n  class StudentService {\n    _httpClient;\n    studentList = STUDENTS_MOCKED;\n    students$ = new BehaviorSubject([]);\n    url = \"https://jsonplaceholder.typicode.com/users\";\n    studentListApi;\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n    }\n    getApiAndClearStudent() {\n      this._httpClient.get(this.url).subscribe(data => {\n        this.studentListApi = data;\n        let newListStudent = [];\n        this.studentListApi.forEach(element => {\n          let temp = element['name'].split(' ');\n          newListStudent.push({\n            'id': element['id'],\n            'firstName': temp[0],\n            'lastName': temp[1]\n          });\n        });\n        this.students$.next(newListStudent);\n      });\n    }\n    static ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return StudentService;\n})();","map":{"version":3,"names":["BehaviorSubject","STUDENTS_MOCKED","StudentService","_httpClient","studentList","students$","url","studentListApi","constructor","getApiAndClearStudent","get","subscribe","data","newListStudent","forEach","element","temp","split","push","next","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ni2\\Documents\\M1_git\\web\\Angular_Front\\src\\services\\student\\student.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, last } from 'rxjs';\r\nimport { STUDENTS_MOCKED } from 'src/mocks/student.mock';\r\nimport { Student } from 'src/models/student';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class StudentService {\r\n\r\n    private studentList: Student[] = STUDENTS_MOCKED;\r\n    public students$: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n    public url: string = \"https://jsonplaceholder.typicode.com/users\";\r\n    private studentListApi: any;\r\n    constructor(private _httpClient: HttpClient) {\r\n        \r\n    }\r\n\r\n    public getApiAndClearStudent() {\r\n        this._httpClient.get(this.url)\r\n        .subscribe(data => {\r\n            this.studentListApi= (<any>data);\r\n            let newListStudent: { id: any; firstName: any; lastName: any; }[] = [];\r\n            this.studentListApi.forEach((element: any) => {\r\n                let temp = element['name'].split(' ');\r\n                newListStudent.push({'id' :element['id'], 'firstName': temp[0], 'lastName': temp[1]});\r\n                \r\n            });\r\n            this.students$.next(newListStudent);\r\n        }\r\n        );\r\n    }\r\n} "],"mappings":"AAEA,SAASA,eAAe,QAAc,MAAM;AAC5C,SAASC,eAAe,QAAQ,wBAAwB;;;AAOxD,WAAaC,cAAc;EAArB,MAAOA,cAAc;IAMHC,WAAA;IAJZC,WAAW,GAAcH,eAAe;IACzCI,SAAS,GAA2B,IAAIL,eAAe,CAAC,EAAE,CAAC;IAC3DM,GAAG,GAAW,4CAA4C;IACzDC,cAAc;IACtBC,YAAoBL,WAAuB;MAAvB,KAAAA,WAAW,GAAXA,WAAW;IAE/B;IAEOM,qBAAqBA,CAAA;MACxB,IAAI,CAACN,WAAW,CAACO,GAAG,CAAC,IAAI,CAACJ,GAAG,CAAC,CAC7BK,SAAS,CAACC,IAAI,IAAG;QACd,IAAI,CAACL,cAAc,GAAQK,IAAK;QAChC,IAAIC,cAAc,GAAkD,EAAE;QACtE,IAAI,CAACN,cAAc,CAACO,OAAO,CAAEC,OAAY,IAAI;UACzC,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC;UACrCJ,cAAc,CAACK,IAAI,CAAC;YAAC,IAAI,EAAEH,OAAO,CAAC,IAAI,CAAC;YAAE,WAAW,EAAEC,IAAI,CAAC,CAAC,CAAC;YAAE,UAAU,EAAEA,IAAI,CAAC,CAAC;UAAC,CAAC,CAAC;QAEzF,CAAC,CAAC;QACF,IAAI,CAACX,SAAS,CAACc,IAAI,CAACN,cAAc,CAAC;MACvC,CAAC,CACA;IACL;;uBAvBSX,cAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAdrB,cAAc;MAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;MAAAC,UAAA,EAHX;IAAM;;SAGTxB,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}