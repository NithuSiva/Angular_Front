{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../student/student.service\";\nexport let TicketService = /*#__PURE__*/(() => {\n  class TicketService {\n    _httpClient;\n    studentService;\n    ticketList = [];\n    tickets$ = new BehaviorSubject(this.ticketList);\n    ticketListApi;\n    constructor(_httpClient, studentService) {\n      this._httpClient = _httpClient;\n      this.studentService = studentService;\n    }\n    static ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StudentService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TicketService;\n})();\nlet urlBackEnd = \"http://localhost:3000/api/tickets\";\ntry {\n  this._httpClient.get(urlBackEnd).subscribe(data => {\n    this.ticketListApi = data;\n    console.log(\"this.ticketListApi : \", this.ticketListApi);\n    /* this.ticketListApi.forEach((element: any) => {\n      console.log(\"Element : \", element)\n      \n       element['student'].forEach((element2: any) => {\n        if (element2.studentId == element['id']) {\n          let studentCurrent: Student = {'id' :element2['studentId'], 'firstName': element2['FirstName'], 'lastName': element2['LastName']};element2;\n        \n          let newStudent: Ticket = {\n            'title': element['title'],\n            'description': element['description'],\n            'date': element['date'],\n            'student': studentCurrent,\n            'major': element['major'],\n            'archived': element['archived']\n          };\n          this.ticketList.push(newStudent);\n        }\n      });\n      \n    }); */\n    this.tickets$.next(this.ticketList);\n  });\n} catch (error) {\n  console.error(\"Erreur HTTP GET\");\n  throw error;\n}\naddTicket(ticket, Ticket);\n{\n  // You need here to update the list of ticket and then update our observable (Subject) with the new list\n  // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n  this.tickets$.value.push(ticket);\n  console.log(\"Ajout dans la liste: \", this.tickets$.value);\n  this.tickets$.next(this.ticketList);\n}\narchivedTicket(ticket, Ticket);\n{\n  ticket.archived = true;\n  this.tickets$.next(this.ticketList);\n}\ndeletedTicket(ticket, Ticket);\n{\n  // this.tickets$.value.filter(tick => tick != ticket);\n  this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\n  console.log(\"Suppresion dans la liste: \", this.tickets$.value);\n  this.tickets$.next(this.ticketList);\n}","map":{"version":3,"names":["BehaviorSubject","TicketService","_httpClient","studentService","ticketList","tickets$","ticketListApi","constructor","i0","ɵɵinject","i1","HttpClient","i2","StudentService","factory","ɵfac","providedIn","urlBackEnd","get","subscribe","data","console","log","next","error","addTicket","ticket","Ticket","value","push","archivedTicket","archived","deletedTicket","splice","indexOf"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { StudentService } from '../student/student.service';\r\nimport { Student } from 'src/models/student';\r\n\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n\r\n  private ticketList: Ticket[] = [];\r\n\r\n  public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  private ticketListApi: any;\r\n\r\n  constructor(private _httpClient: HttpClient, public studentService: StudentService) {\r\n  }\r\n\r\n  getBackEndTicketList():{\r\n    let urlBackEnd = \"http://localhost:3000/api/tickets\";\r\n    try {\r\n        this._httpClient.get(urlBackEnd)\r\n        .subscribe(data => {\r\n          this.ticketListApi = (<any>data);\r\n          console.log(\"this.ticketListApi : \", this.ticketListApi)\r\n          /* this.ticketListApi.forEach((element: any) => {\r\n            console.log(\"Element : \", element)\r\n            \r\n\r\n            element['student'].forEach((element2: any) => {\r\n              if (element2.studentId == element['id']) {\r\n                let studentCurrent: Student = {'id' :element2['studentId'], 'firstName': element2['FirstName'], 'lastName': element2['LastName']};element2;\r\n              \r\n                let newStudent: Ticket = {\r\n                  'title': element['title'],\r\n                  'description': element['description'],\r\n                  'date': element['date'],\r\n                  'student': studentCurrent,\r\n                  'major': element['major'],\r\n                  'archived': element['archived']\r\n                };\r\n                this.ticketList.push(newStudent);\r\n              }\r\n            });\r\n            \r\n          }); */\r\n          this.tickets$.next(this.ticketList);\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP GET\");\r\n        throw error;\r\n    }\r\n}\r\n\r\n  addTicket(ticket: Ticket) {\r\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\r\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\r\n    this.tickets$.value.push(ticket);\r\n    console.log(\"Ajout dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  }\r\n\r\n  archivedTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    this.tickets$.next(this.ticketList);\r\n  }\r\n\r\n   deletedTicket(ticket: Ticket) {\r\n    // this.tickets$.value.filter(tick => tick != ticket);\r\n    this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\r\n    console.log(\"Suppresion dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  } \r\n}\r\n"],"mappings":"AAMA,SAASA,eAAe,QAAQ,MAAM;;;;AAMtC,WAAaC,aAAa;EAApB,MAAOA,aAAa;IAQJC,WAAA;IAAgCC,cAAA;IAN5CC,UAAU,GAAa,EAAE;IAE1BC,QAAQ,GAA8B,IAAIL,eAAe,CAAC,IAAI,CAACI,UAAU,CAAC;IAEzEE,aAAa;IAErBC,YAAoBL,WAAuB,EAASC,cAA8B;MAA9D,KAAAD,WAAW,GAAXA,WAAW;MAAqB,KAAAC,cAAc,GAAdA,cAAc;IAClE;;uBATWF,aAAa,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;IAAA;;aAAbZ,aAAa;MAAAa,OAAA,EAAbb,aAAa,CAAAc,IAAA;MAAAC,UAAA,EAFZ;IAAM;;SAEPf,aAAa;AAAA;AAYtB,IAAIgB,UAAU,GAAG,mCAAmC;AACpD,IAAI;EACA,IAAI,CAACf,WAAW,CAACgB,GAAG,CAACD,UAAU,CAAC,CAC/BE,SAAS,CAACC,IAAI,IAAG;IAChB,IAAI,CAACd,aAAa,GAASc,IAAK;IAChCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAChB,aAAa,CAAC;IACxD;;;;;;;;;;;;;;;;;;;;IAqBA,IAAI,CAACD,QAAQ,CAACkB,IAAI,CAAC,IAAI,CAACnB,UAAU,CAAC;EACrC,CAAC,CACA;CACJ,CAAC,OAAOoB,KAAK,EAAE;EACZH,OAAO,CAACG,KAAK,CAAC,iBAAiB,CAAC;EAChC,MAAMA,KAAK;;AAIjBC,SAAS,CAACC,MAAM,EAAEC,MAAM,CAAC;AAAC;EACxB;EACA;EACA,IAAI,CAACtB,QAAQ,CAACuB,KAAK,CAACC,IAAI,CAACH,MAAM,CAAC;EAChCL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACjB,QAAQ,CAACuB,KAAK,CAAC;EACzD,IAAI,CAACvB,QAAQ,CAACkB,IAAI,CAAC,IAAI,CAACnB,UAAU,CAAC;;AAGrC0B,cAAc,CAACJ,MAAM,EAAEC,MAAM,CAAC;AAAC;EAC7BD,MAAM,CAACK,QAAQ,GAAG,IAAI;EACtB,IAAI,CAAC1B,QAAQ,CAACkB,IAAI,CAAC,IAAI,CAACnB,UAAU,CAAC;;AAGpC4B,aAAa,CAACN,MAAM,EAAEC,MAAM,CAAC;AAAC;EAC7B;EACA,IAAI,CAACtB,QAAQ,CAACuB,KAAK,CAACK,MAAM,CAAC,IAAI,CAAC5B,QAAQ,CAACuB,KAAK,CAACM,OAAO,CAACR,MAAM,CAAC,EAAE,CAAC,CAAC;EAClEL,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAACjB,QAAQ,CAACuB,KAAK,CAAC;EAC9D,IAAI,CAACvB,QAAQ,CAACkB,IAAI,CAAC,IAAI,CAACnB,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}