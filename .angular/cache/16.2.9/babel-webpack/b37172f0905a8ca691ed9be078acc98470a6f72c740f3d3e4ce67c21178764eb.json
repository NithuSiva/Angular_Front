{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../student/student.service\";\nexport let TicketService = /*#__PURE__*/(() => {\n  class TicketService {\n    _httpClient;\n    studentService;\n    ticketList = [];\n    tickets$ = new BehaviorSubject(this.ticketList);\n    ticketListApi;\n    ticketHasBeenAdded = new EventEmitter();\n    ticketHasBeenDeleted = new EventEmitter();\n    constructor(_httpClient, studentService) {\n      this._httpClient = _httpClient;\n      this.studentService = studentService;\n    }\n    getTicketList() {\n      return this.ticketList;\n    }\n    httpGetTickets() {\n      let urlBackEnd = \"http://localhost:3000/api/tickets\";\n      try {\n        this._httpClient.get(urlBackEnd).subscribe(data => {\n          this.ticketListApi = data;\n          this.ticketListApi.forEach(element => {\n            let students = this.studentService.getData().subscribe(students => {\n              students.forEach(element2 => {\n                if (element2.studentId == element['id']) {\n                  let studentCurrent = {\n                    'id': element2['studentId'],\n                    'firstName': element2['firstName'],\n                    'lastName': element2['lastName']\n                  };\n                  let newTicket = {\n                    'title': element['title'],\n                    'description': element['description'],\n                    'date': element['date'],\n                    'student': studentCurrent,\n                    'major': element['major'],\n                    'archived': element['archived']\n                  };\n                  this.ticketList.push(newTicket);\n                } else {\n                  let newTicket = {\n                    'title': element['title'],\n                    'description': element['description'],\n                    'date': element['date'],\n                    'student': studentCurrent,\n                    'major': element['major'],\n                    'archived': element['archived']\n                  };\n                  this.ticketList.push(newTicket);\n                }\n              });\n            }, error => {\n              console.error('Erreur lors de la récupération des données :', error);\n            });\n          });\n          this.ticketListApi = this.ticketList;\n          this.tickets$.next(this.ticketListApi);\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP GET\");\n        throw error;\n      }\n    }\n    addTicket(ticket) {\n      // You need here to update the list of ticket and then update our observable (Subject) with the new list\n      // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n      this.tickets$.value.push(ticket);\n      console.log(\"Ajout dans la liste: \", this.tickets$.value);\n      this.tickets$.next(this.ticketList);\n    }\n    archivedTicket(ticket) {\n      ticket.archived = true;\n      this.tickets$.next(this.ticketList);\n    }\n    httpPostTicket(ticket) {\n      let urlBackEndAddTicket = \"http://localhost:3000/api/tickets/ajouter\";\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      try {\n        // title?: string;\n        // description?: string;\n        // date?: Date;\n        // student?: Student;\n        // major?: Major;\n        // archived?: boolean;\n        let data = {\n          title: ticket.title,\n          description: ticket.description,\n          date: ticket.date,\n          studentId: ticket.student.id,\n          major: ticket.major,\n          archived: false\n        };\n        this._httpClient.post(urlBackEndAddTicket, data).subscribe(res => {\n          this.ticketHasBeenAdded.emit(data);\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP POST\");\n        throw error;\n      }\n    }\n    httpDeleteTicket(ticket) {\n      console.log(\"httpDeleteStudent : \", ticket?.student?.id);\n      let urlBackEndDeleteTicket = \"http://localhost:3000/api/students/supprimer/\" + ticket?.student?.id;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      try {\n        this._httpClient.delete(urlBackEndDeleteTicket).subscribe(res => {\n          this.ticketHasBeenDeleted.emit();\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP POST\");\n        throw error;\n      }\n    }\n    static ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StudentService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TicketService;\n})();","map":{"version":3,"names":["EventEmitter","BehaviorSubject","HttpHeaders","TicketService","_httpClient","studentService","ticketList","tickets$","ticketListApi","ticketHasBeenAdded","ticketHasBeenDeleted","constructor","getTicketList","httpGetTickets","urlBackEnd","get","subscribe","data","forEach","element","students","getData","element2","studentId","studentCurrent","newTicket","push","error","console","next","addTicket","ticket","value","log","archivedTicket","archived","httpPostTicket","urlBackEndAddTicket","headers","title","description","date","student","id","major","post","res","emit","httpDeleteTicket","urlBackEndDeleteTicket","delete","i0","ɵɵinject","i1","HttpClient","i2","StudentService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { StudentService } from '../student/student.service';\r\nimport { Student } from 'src/models/student';\r\n\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n\r\n  public ticketList: Ticket[] = [];\r\n\r\n  public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  private ticketListApi: any;\r\n\r\n  public ticketHasBeenAdded: EventEmitter<Ticket> = new EventEmitter<Ticket>();\r\n\r\n  public ticketHasBeenDeleted: EventEmitter<Ticket> = new EventEmitter<Ticket>();\r\n\r\n  constructor(private _httpClient: HttpClient, public studentService: StudentService) {\r\n  }\r\n\r\n  getTicketList(){\r\n    return this.ticketList;\r\n  }\r\n\r\n  httpGetTickets(){\r\n    let urlBackEnd = \"http://localhost:3000/api/tickets\";\r\n    try {\r\n        this._httpClient.get(urlBackEnd)\r\n        .subscribe(data => {\r\n          this.ticketListApi = (<any>data);\r\n          this.ticketListApi.forEach((element: any) => {\r\n            let students = this.studentService.getData().subscribe(\r\n              (students) => {\r\n                students.forEach(((element2: any) => {\r\n\r\n                  if (element2.studentId == element['id']) {\r\n                    let studentCurrent: Student = {'id' :element2['studentId'], 'firstName': element2['firstName'], 'lastName': element2['lastName']};\r\n\r\n                    let newTicket: Ticket = {\r\n                    'title': element['title'],\r\n                    'description': element['description'],\r\n                    'date': element['date'],\r\n                    'student': studentCurrent,\r\n                    'major': element['major'],\r\n                    'archived': element['archived']\r\n                    };\r\n                    this.ticketList.push(newTicket);\r\n                  } else {\r\n                    let newTicket: Ticket = {\r\n                      'title': element['title'],\r\n                      'description': element['description'],\r\n                      'date': element['date'],\r\n                      'student': studentCurrent,\r\n                      'major': element['major'],\r\n                      'archived': element['archived']\r\n                      };\r\n                      this.ticketList.push(newTicket);\r\n                  }\r\n                }));\r\n                \r\n                \r\n              },\r\n              (error) => {\r\n                console.error('Erreur lors de la récupération des données :', error);\r\n              }\r\n            );\r\n            \r\n          });\r\n          this.ticketListApi = this.ticketList;\r\n          this.tickets$.next(this.ticketListApi);\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP GET\");\r\n        throw error;\r\n    }\r\n}\r\n\r\n  addTicket(ticket: Ticket) {\r\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\r\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\r\n    this.tickets$.value.push(ticket);\r\n    console.log(\"Ajout dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  }\r\n\r\n  archivedTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    this.tickets$.next(this.ticketList);\r\n  }\r\n\r\n  httpPostTicket(ticket: any) {\r\n    let urlBackEndAddTicket = \"http://localhost:3000/api/tickets/ajouter\";\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    try {\r\n        // title?: string;\r\n        // description?: string;\r\n        // date?: Date;\r\n        // student?: Student;\r\n        // major?: Major;\r\n        // archived?: boolean;\r\n      let data: any = {\r\n        title: ticket.title,\r\n        description: ticket.description,\r\n        date: ticket.date,\r\n        studentId: ticket.student.id,\r\n        major: ticket.major,\r\n        archived: false\r\n      };\r\n      this._httpClient.post<any>(urlBackEndAddTicket, data)\r\n      .subscribe(res => {\r\n        this.ticketHasBeenAdded.emit(data);\r\n      }\r\n      );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP POST\");\r\n        throw error;\r\n    }\r\n  }\r\n\r\n  httpDeleteTicket(ticket: Ticket){\r\n    console.log(\"httpDeleteStudent : \", ticket?.student?.id);\r\n    let urlBackEndDeleteTicket = \"http://localhost:3000/api/students/supprimer/\" + ticket?.student?.id;\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    try {\r\n        this._httpClient.delete<any>(urlBackEndDeleteTicket)\r\n        .subscribe(res => {\r\n            this.ticketHasBeenDeleted.emit();\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP POST\");\r\n        throw error;\r\n    }\r\n  }\r\n\r\n\r\n  //  deletedTicket(ticket: Ticket) {\r\n  //   // this.tickets$.value.filter(tick => tick != ticket);\r\n  //   this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\r\n  //   console.log(\"Suppresion dans la liste: \", this.tickets$.value);\r\n  //   this.tickets$.next(this.ticketList)\r\n  // } \r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}