{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../student/student.service\";\nexport let TicketService = /*#__PURE__*/(() => {\n  class TicketService {\n    _httpClient;\n    studentService;\n    ticketList = [];\n    tickets$ = new BehaviorSubject(this.ticketList);\n    ticketListApi;\n    ticketHasBeenAdded = new EventEmitter();\n    ticketHasBeenDeleted = new EventEmitter();\n    constructor(_httpClient, studentService) {\n      this._httpClient = _httpClient;\n      this.studentService = studentService;\n    }\n    getTicketList() {\n      return this.ticketList;\n    }\n    httpGetTickets() {\n      let urlBackEnd = \"http://localhost:3000/api/tickets\";\n      try {\n        this._httpClient.get(urlBackEnd).subscribe(data => {\n          this.ticketListApi = data;\n          this.ticketListApi.forEach(element => {\n            let students = this.studentService.getData().subscribe(students => {\n              // students.forEach(((element2: any) => {\n              //   if (element2.studentId == element['id']) {\n              //     let studentCurrent: Student = {'id' :element2['studentId'], 'firstName': element2['firstName'], 'lastName': element2['lastName']};\n              //     let newTicket: Ticket = {\n              //     'title': element['title'],\n              //     'description': element['description'],\n              //     'date': element['date'],\n              //     'student': studentCurrent,\n              //     'major': element['major'],\n              //     'archived': element['archived']\n              //     };\n              //     this.ticketList.push(newTicket);\n              //   } \n              // }));\n              console.log(students[Object.keys(students).find(key => students.studentId === element.id)]);\n            });\n          }, error => {\n            console.error('Erreur lors de la récupération des données :', error);\n          });\n        });\n        this.ticketListApi = this.ticketList;\n        this.tickets$.next(this.ticketListApi);\n      } finally {}\n      ;\n    }\n    catch(error) {\n      console.error(\"Erreur HTTP GET\");\n      throw error;\n    }\n    static ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StudentService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TicketService;\n})();\naddTicket(ticket, Ticket);\n{\n  // You need here to update the list of ticket and then update our observable (Subject) with the new list\n  // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n  this.tickets$.value.push(ticket);\n  console.log(\"Ajout dans la liste: \", this.tickets$.value);\n  this.tickets$.next(this.ticketList);\n}\narchivedTicket(ticket, Ticket);\n{\n  ticket.archived = true;\n  this.tickets$.next(this.ticketList);\n}\nhttpPostTicket(ticket, any);\n{\n  let urlBackEndAddTicket = \"http://localhost:3000/api/tickets/ajouter\";\n  const headers = new HttpHeaders({\n    'Content-Type': 'application/json'\n  });\n  try {\n    // title?: string;\n    // description?: string;\n    // date?: Date;\n    // student?: Student;\n    // major?: Major;\n    // archived?: boolean;\n    let data = {\n      title: ticket.title,\n      description: ticket.description,\n      date: ticket.date,\n      studentId: ticket.student.id,\n      major: ticket.major,\n      archived: false\n    };\n    this._httpClient.post(urlBackEndAddTicket, data).subscribe(res => {\n      this.ticketHasBeenAdded.emit(data);\n    });\n  } catch (error) {\n    console.error(\"Erreur HTTP POST\");\n    throw error;\n  }\n}\nhttpDeleteTicket(ticket, Ticket);\n{\n  console.log(\"httpDeleteStudent : \", ticket?.student?.id);\n  let urlBackEndDeleteTicket = \"http://localhost:3000/api/students/supprimer/\" + ticket?.student?.id;\n  const headers = new HttpHeaders({\n    'Content-Type': 'application/json'\n  });\n  try {\n    this._httpClient.delete(urlBackEndDeleteTicket).subscribe(res => {\n      this.ticketHasBeenDeleted.emit();\n    });\n  } catch (error) {\n    console.error(\"Erreur HTTP POST\");\n    throw error;\n  }\n}","map":{"version":3,"names":["EventEmitter","BehaviorSubject","HttpHeaders","TicketService","_httpClient","studentService","ticketList","tickets$","ticketListApi","ticketHasBeenAdded","ticketHasBeenDeleted","constructor","getTicketList","httpGetTickets","urlBackEnd","get","subscribe","data","forEach","element","students","getData","console","log","Object","keys","find","key","studentId","id","error","next","catch","i0","ɵɵinject","i1","HttpClient","i2","StudentService","factory","ɵfac","providedIn","addTicket","ticket","Ticket","value","push","archivedTicket","archived","httpPostTicket","any","urlBackEndAddTicket","headers","title","description","date","student","major","post","res","emit","httpDeleteTicket","urlBackEndDeleteTicket","delete"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { StudentService } from '../student/student.service';\r\nimport { Student } from 'src/models/student';\r\n\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n\r\n  public ticketList: Ticket[] = [];\r\n\r\n  public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  private ticketListApi: any;\r\n\r\n  public ticketHasBeenAdded: EventEmitter<Ticket> = new EventEmitter<Ticket>();\r\n\r\n  public ticketHasBeenDeleted: EventEmitter<Ticket> = new EventEmitter<Ticket>();\r\n\r\n  constructor(private _httpClient: HttpClient, public studentService: StudentService) {\r\n  }\r\n\r\n  getTicketList(){\r\n    return this.ticketList;\r\n  }\r\n\r\n  httpGetTickets(){\r\n    let urlBackEnd = \"http://localhost:3000/api/tickets\";\r\n    try {\r\n        this._httpClient.get(urlBackEnd)\r\n        .subscribe(data => {\r\n          this.ticketListApi = (<any>data);\r\n          this.ticketListApi.forEach((element: any) => {\r\n            let students = this.studentService.getData().subscribe(\r\n              (students) => {\r\n                // students.forEach(((element2: any) => {\r\n\r\n                //   if (element2.studentId == element['id']) {\r\n                //     let studentCurrent: Student = {'id' :element2['studentId'], 'firstName': element2['firstName'], 'lastName': element2['lastName']};\r\n\r\n                //     let newTicket: Ticket = {\r\n                //     'title': element['title'],\r\n                //     'description': element['description'],\r\n                //     'date': element['date'],\r\n                //     'student': studentCurrent,\r\n                //     'major': element['major'],\r\n                //     'archived': element['archived']\r\n                //     };\r\n\r\n                //     this.ticketList.push(newTicket);\r\n                //   } \r\n                // }));\r\n                \r\n                console.log(students[Object.keys(students).find(key =>   students.studentId === element.id)});\r\n              },\r\n              (error) => {\r\n                console.error('Erreur lors de la récupération des données :', error);\r\n              }\r\n            );\r\n            \r\n          });\r\n          this.ticketListApi = this.ticketList;\r\n          this.tickets$.next(this.ticketListApi);\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP GET\");\r\n        throw error;\r\n    }\r\n}\r\n\r\n  addTicket(ticket: Ticket) {\r\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\r\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\r\n    this.tickets$.value.push(ticket);\r\n    console.log(\"Ajout dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  }\r\n\r\n  archivedTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    this.tickets$.next(this.ticketList);\r\n  }\r\n\r\n  httpPostTicket(ticket: any) {\r\n    let urlBackEndAddTicket = \"http://localhost:3000/api/tickets/ajouter\";\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    try {\r\n        // title?: string;\r\n        // description?: string;\r\n        // date?: Date;\r\n        // student?: Student;\r\n        // major?: Major;\r\n        // archived?: boolean;\r\n      let data: any = {\r\n        title: ticket.title,\r\n        description: ticket.description,\r\n        date: ticket.date,\r\n        studentId: ticket.student.id,\r\n        major: ticket.major,\r\n        archived: false\r\n      };\r\n      this._httpClient.post<any>(urlBackEndAddTicket, data)\r\n      .subscribe(res => {\r\n        this.ticketHasBeenAdded.emit(data);\r\n      }\r\n      );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP POST\");\r\n        throw error;\r\n    }\r\n  }\r\n\r\n  httpDeleteTicket(ticket: Ticket){\r\n    console.log(\"httpDeleteStudent : \", ticket?.student?.id);\r\n    let urlBackEndDeleteTicket = \"http://localhost:3000/api/students/supprimer/\" + ticket?.student?.id;\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    try {\r\n        this._httpClient.delete<any>(urlBackEndDeleteTicket)\r\n        .subscribe(res => {\r\n            this.ticketHasBeenDeleted.emit();\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP POST\");\r\n        throw error;\r\n    }\r\n  }\r\n\r\n\r\n  //  deletedTicket(ticket: Ticket) {\r\n  //   // this.tickets$.value.filter(tick => tick != ticket);\r\n  //   this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\r\n  //   console.log(\"Suppresion dans la liste: \", this.tickets$.value);\r\n  //   this.tickets$.next(this.ticketList)\r\n  // } \r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}