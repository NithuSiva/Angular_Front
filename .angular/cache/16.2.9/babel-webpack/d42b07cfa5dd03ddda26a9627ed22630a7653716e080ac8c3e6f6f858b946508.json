{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../student/student.service\";\nexport let TicketService = /*#__PURE__*/(() => {\n  class TicketService {\n    _httpClient;\n    studentService;\n    ticketList = [];\n    tickets$ = new BehaviorSubject(this.ticketList);\n    ticketListApi;\n    constructor(_httpClient, studentService) {\n      this._httpClient = _httpClient;\n      this.studentService = studentService;\n    }\n    getTicketList() {\n      return this.ticketList;\n    }\n    httpGetTickets() {\n      let urlBackEnd = \"http://localhost:3000/api/tickets\";\n      try {\n        this._httpClient.get(urlBackEnd).subscribe(data => {\n          this.ticketListApi = data;\n          console.log(\"data\", data);\n          this.ticketListApi.forEach(element => {\n            let students = this.studentService.getData().subscribe(students => {\n              students.forEach(element2 => {\n                if (element2.studentId == element['id']) {\n                  let studentCurrent = {\n                    'id': element2['studentId'],\n                    'firstName': element2['firstName'],\n                    'lastName': element2['lastName']\n                  };\n                  let newStudent = {\n                    'title': element['title'],\n                    'description': element['description'],\n                    'date': element['date'],\n                    'student': studentCurrent,\n                    'major': element['major'],\n                    'archived': element['archived']\n                  };\n                  this.ticketList.push(newStudent);\n                }\n              });\n            }, error => {\n              console.error('Erreur lors de la récupération des données :', error);\n            });\n          });\n          console.log(this.ticketList);\n          this.ticketListApi = this.ticketList;\n          this.tickets$.next(this.ticketListApi);\n        });\n      } catch (error) {\n        console.error(\"Erreur HTTP GET\");\n        throw error;\n      }\n    }\n    addTicket(ticket) {\n      // You need here to update the list of ticket and then update our observable (Subject) with the new list\n      // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n      this.tickets$.value.push(ticket);\n      console.log(\"Ajout dans la liste: \", this.tickets$.value);\n      this.tickets$.next(this.ticketList);\n    }\n    archivedTicket(ticket) {\n      ticket.archived = true;\n      this.tickets$.next(this.ticketList);\n    }\n    deletedTicket(ticket) {\n      // this.tickets$.value.filter(tick => tick != ticket);\n      this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\n      console.log(\"Suppresion dans la liste: \", this.tickets$.value);\n      this.tickets$.next(this.ticketList);\n    }\n    static ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StudentService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TicketService;\n})();","map":{"version":3,"names":["BehaviorSubject","TicketService","_httpClient","studentService","ticketList","tickets$","ticketListApi","constructor","getTicketList","httpGetTickets","urlBackEnd","get","subscribe","data","console","log","forEach","element","students","getData","element2","studentId","studentCurrent","newStudent","push","error","next","addTicket","ticket","value","archivedTicket","archived","deletedTicket","splice","indexOf","i0","ɵɵinject","i1","HttpClient","i2","StudentService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { StudentService } from '../student/student.service';\r\nimport { Student } from 'src/models/student';\r\n\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n\r\n  public ticketList: Ticket[] = [];\r\n\r\n  public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  private ticketListApi: any;\r\n\r\n  constructor(private _httpClient: HttpClient, public studentService: StudentService) {\r\n  }\r\n\r\n  getTicketList(){\r\n    return this.ticketList;\r\n  }\r\n\r\n  httpGetTickets(){\r\n    let urlBackEnd = \"http://localhost:3000/api/tickets\";\r\n    try {\r\n        this._httpClient.get(urlBackEnd)\r\n        .subscribe(data => {\r\n          this.ticketListApi = (<any>data);\r\n          console.log(\"data\", data);\r\n          this.ticketListApi.forEach((element: any) => {\r\n            let students = this.studentService.getData().subscribe(\r\n              (students) => {\r\n                students.forEach(((element2: any) => {\r\n\r\n                  if (element2.studentId == element['id']) {\r\n                    let studentCurrent: Student = {'id' :element2['studentId'], 'firstName': element2['firstName'], 'lastName': element2['lastName']};\r\n\r\n                    let newStudent: Ticket = {\r\n                    'title': element['title'],\r\n                    'description': element['description'],\r\n                    'date': element['date'],\r\n                    'student': studentCurrent,\r\n                    'major': element['major'],\r\n                    'archived': element['archived']\r\n                    };\r\n                    this.ticketList.push(newStudent);\r\n                  }\r\n                }));\r\n                \r\n                \r\n              },\r\n              (error) => {\r\n                console.error('Erreur lors de la récupération des données :', error);\r\n              }\r\n            );\r\n            \r\n          });\r\n          console.log(this.ticketList);\r\n          this.ticketListApi = this.ticketList;\r\n          this.tickets$.next(this.ticketListApi);\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP GET\");\r\n        throw error;\r\n    }\r\n}\r\n\r\n  addTicket(ticket: Ticket) {\r\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\r\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\r\n    this.tickets$.value.push(ticket);\r\n    console.log(\"Ajout dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  }\r\n\r\n  archivedTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    this.tickets$.next(this.ticketList);\r\n  }\r\n\r\n   deletedTicket(ticket: Ticket) {\r\n    // this.tickets$.value.filter(tick => tick != ticket);\r\n    this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\r\n    console.log(\"Suppresion dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  } \r\n}\r\n"],"mappings":"AAMA,SAASA,eAAe,QAAQ,MAAM;;;;AAMtC,WAAaC,aAAa;EAApB,MAAOA,aAAa;IAQJC,WAAA;IAAgCC,cAAA;IAN7CC,UAAU,GAAa,EAAE;IAEzBC,QAAQ,GAA8B,IAAIL,eAAe,CAAC,IAAI,CAACI,UAAU,CAAC;IAEzEE,aAAa;IAErBC,YAAoBL,WAAuB,EAASC,cAA8B;MAA9D,KAAAD,WAAW,GAAXA,WAAW;MAAqB,KAAAC,cAAc,GAAdA,cAAc;IAClE;IAEAK,aAAaA,CAAA;MACX,OAAO,IAAI,CAACJ,UAAU;IACxB;IAEAK,cAAcA,CAAA;MACZ,IAAIC,UAAU,GAAG,mCAAmC;MACpD,IAAI;QACA,IAAI,CAACR,WAAW,CAACS,GAAG,CAACD,UAAU,CAAC,CAC/BE,SAAS,CAACC,IAAI,IAAG;UAChB,IAAI,CAACP,aAAa,GAASO,IAAK;UAChCC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEF,IAAI,CAAC;UACzB,IAAI,CAACP,aAAa,CAACU,OAAO,CAAEC,OAAY,IAAI;YAC1C,IAAIC,QAAQ,GAAG,IAAI,CAACf,cAAc,CAACgB,OAAO,EAAE,CAACP,SAAS,CACnDM,QAAQ,IAAI;cACXA,QAAQ,CAACF,OAAO,CAAGI,QAAa,IAAI;gBAElC,IAAIA,QAAQ,CAACC,SAAS,IAAIJ,OAAO,CAAC,IAAI,CAAC,EAAE;kBACvC,IAAIK,cAAc,GAAY;oBAAC,IAAI,EAAEF,QAAQ,CAAC,WAAW,CAAC;oBAAE,WAAW,EAAEA,QAAQ,CAAC,WAAW,CAAC;oBAAE,UAAU,EAAEA,QAAQ,CAAC,UAAU;kBAAC,CAAC;kBAEjI,IAAIG,UAAU,GAAW;oBACzB,OAAO,EAAEN,OAAO,CAAC,OAAO,CAAC;oBACzB,aAAa,EAAEA,OAAO,CAAC,aAAa,CAAC;oBACrC,MAAM,EAAEA,OAAO,CAAC,MAAM,CAAC;oBACvB,SAAS,EAAEK,cAAc;oBACzB,OAAO,EAAEL,OAAO,CAAC,OAAO,CAAC;oBACzB,UAAU,EAAEA,OAAO,CAAC,UAAU;mBAC7B;kBACD,IAAI,CAACb,UAAU,CAACoB,IAAI,CAACD,UAAU,CAAC;;cAEpC,CAAE,CAAC;YAGL,CAAC,EACAE,KAAK,IAAI;cACRX,OAAO,CAACW,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;YACtE,CAAC,CACF;UAEH,CAAC,CAAC;UACFX,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAAC;UAC5B,IAAI,CAACE,aAAa,GAAG,IAAI,CAACF,UAAU;UACpC,IAAI,CAACC,QAAQ,CAACqB,IAAI,CAAC,IAAI,CAACpB,aAAa,CAAC;QACxC,CAAC,CACA;OACJ,CAAC,OAAOmB,KAAK,EAAE;QACZX,OAAO,CAACW,KAAK,CAAC,iBAAiB,CAAC;QAChC,MAAMA,KAAK;;IAEnB;IAEEE,SAASA,CAACC,MAAc;MACtB;MACA;MACA,IAAI,CAACvB,QAAQ,CAACwB,KAAK,CAACL,IAAI,CAACI,MAAM,CAAC;MAChCd,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACV,QAAQ,CAACwB,KAAK,CAAC;MACzD,IAAI,CAACxB,QAAQ,CAACqB,IAAI,CAAC,IAAI,CAACtB,UAAU,CAAC;IACrC;IAEA0B,cAAcA,CAACF,MAAc;MAC3BA,MAAM,CAACG,QAAQ,GAAG,IAAI;MACtB,IAAI,CAAC1B,QAAQ,CAACqB,IAAI,CAAC,IAAI,CAACtB,UAAU,CAAC;IACrC;IAEC4B,aAAaA,CAACJ,MAAc;MAC3B;MACA,IAAI,CAACvB,QAAQ,CAACwB,KAAK,CAACI,MAAM,CAAC,IAAI,CAAC5B,QAAQ,CAACwB,KAAK,CAACK,OAAO,CAACN,MAAM,CAAC,EAAE,CAAC,CAAC;MAClEd,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAACV,QAAQ,CAACwB,KAAK,CAAC;MAC9D,IAAI,CAACxB,QAAQ,CAACqB,IAAI,CAAC,IAAI,CAACtB,UAAU,CAAC;IACrC;;uBA/EWH,aAAa,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;IAAA;;aAAbvC,aAAa;MAAAwC,OAAA,EAAbxC,aAAa,CAAAyC,IAAA;MAAAC,UAAA,EAFZ;IAAM;;SAEP1C,aAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}