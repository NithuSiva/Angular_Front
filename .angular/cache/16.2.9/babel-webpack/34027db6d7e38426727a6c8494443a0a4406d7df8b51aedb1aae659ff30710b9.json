{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ni2/Documents/Angular_Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TicketService = /*#__PURE__*/(() => {\n  class TicketService {\n    _httpClient;\n    ticketList = TICKETS_MOCKED;\n    ticketListApi = [];\n    tickets$ = new BehaviorSubject(this.ticketList);\n    ticketListApi;\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n    }\n    getBackEndTicketList() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let urlBackEnd = \"http://localhost:3000/api/tickets\";\n        try {\n          yield _this._httpClient.get(urlBackEnd).subscribe(data => {\n            _this.ticketListApi = data;\n            _this.ticketListApi.forEach(element => {\n              //     let temp = element['name'].split(' ');\n              let newStudent = {\n                'id': element['studentId'],\n                'firstName': element['FirstName'],\n                'lastName': element['LastName']\n              };\n              _this.studentList.push(newStudent);\n            });\n            _this.students$.next(_this.studentList);\n          });\n        } catch (error) {\n          console.error(\"Erreur HTTP GET\");\n          throw error;\n        }\n      })();\n    }\n    addTicket(ticket) {\n      // You need here to update the list of ticket and then update our observable (Subject) with the new list\n      // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n      this.tickets$.value.push(ticket);\n      console.log(\"Ajout dans la liste: \", this.tickets$.value);\n      this.tickets$.next(this.ticketList);\n    }\n    archivedTicket(ticket) {\n      ticket.archived = true;\n      this.tickets$.next(this.ticketList);\n    }\n    deletedTicket(ticket) {\n      // this.tickets$.value.filter(tick => tick != ticket);\n      this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\n      console.log(\"Suppresion dans la liste: \", this.tickets$.value);\n      this.tickets$.next(this.ticketList);\n    }\n    static ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TicketService;\n})();","map":{"version":3,"names":["TICKETS_MOCKED","BehaviorSubject","TicketService","_httpClient","ticketList","ticketListApi","tickets$","constructor","getBackEndTicketList","_this","_asyncToGenerator","urlBackEnd","get","subscribe","data","forEach","element","newStudent","studentList","push","students$","next","error","console","addTicket","ticket","value","log","archivedTicket","archived","deletedTicket","splice","indexOf","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ni2\\Documents\\Angular_Front\\src\\services\\ticket\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Ticket } from '../../models/ticket';\r\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TicketService {\r\n\r\n  private ticketList: Ticket[] = TICKETS_MOCKED;\r\n\r\n  private ticketListApi: Ticket[] = [];\r\n\r\n  public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\r\n\r\n  private ticketListApi: any;\r\n\r\n\r\n  constructor(private _httpClient: HttpClient) {\r\n  }\r\n\r\n  async getBackEndTicketList(): Promise<void> {\r\n    let urlBackEnd = \"http://localhost:3000/api/tickets\";\r\n    try {\r\n        await this._httpClient.get(urlBackEnd)\r\n        .subscribe(data => {\r\n            this.ticketListApi= (<any>data);\r\n            this.ticketListApi.forEach((element: any) => {\r\n                //     let temp = element['name'].split(' ');\r\n                let newStudent: Student = {'id' :element['studentId'], 'firstName': element['FirstName'], 'lastName': element['LastName']};\r\n                this.studentList.push(newStudent);\r\n\r\n                \r\n            });\r\n            this.students$.next(this.studentList);\r\n        }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Erreur HTTP GET\");\r\n        throw error;\r\n    }\r\n}\r\n\r\n  addTicket(ticket: Ticket) {\r\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\r\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\r\n    this.tickets$.value.push(ticket);\r\n    console.log(\"Ajout dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  }\r\n\r\n  archivedTicket(ticket: Ticket) {\r\n    ticket.archived = true;\r\n    this.tickets$.next(this.ticketList);\r\n  }\r\n\r\n   deletedTicket(ticket: Ticket) {\r\n    // this.tickets$.value.filter(tick => tick != ticket);\r\n    this.tickets$.value.splice(this.tickets$.value.indexOf(ticket), 1);\r\n    console.log(\"Suppresion dans la liste: \", this.tickets$.value);\r\n    this.tickets$.next(this.ticketList)\r\n  } \r\n}\r\n"],"mappings":";AAEA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,eAAe,QAAQ,MAAM;;;AAMtC,WAAaC,aAAa;EAApB,MAAOA,aAAa;IAWJC,WAAA;IATZC,UAAU,GAAaJ,cAAc;IAErCK,aAAa,GAAa,EAAE;IAE7BC,QAAQ,GAA8B,IAAIL,eAAe,CAAC,IAAI,CAACG,UAAU,CAAC;IAEzEC,aAAa;IAGrBE,YAAoBJ,WAAuB;MAAvB,KAAAA,WAAW,GAAXA,WAAW;IAC/B;IAEMK,oBAAoBA,CAAA;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA;QACxB,IAAIC,UAAU,GAAG,mCAAmC;QACpD,IAAI;UACA,MAAMF,KAAI,CAACN,WAAW,CAACS,GAAG,CAACD,UAAU,CAAC,CACrCE,SAAS,CAACC,IAAI,IAAG;YACdL,KAAI,CAACJ,aAAa,GAAQS,IAAK;YAC/BL,KAAI,CAACJ,aAAa,CAACU,OAAO,CAAEC,OAAY,IAAI;cACxC;cACA,IAAIC,UAAU,GAAY;gBAAC,IAAI,EAAED,OAAO,CAAC,WAAW,CAAC;gBAAE,WAAW,EAAEA,OAAO,CAAC,WAAW,CAAC;gBAAE,UAAU,EAAEA,OAAO,CAAC,UAAU;cAAC,CAAC;cAC1HP,KAAI,CAACS,WAAW,CAACC,IAAI,CAACF,UAAU,CAAC;YAGrC,CAAC,CAAC;YACFR,KAAI,CAACW,SAAS,CAACC,IAAI,CAACZ,KAAI,CAACS,WAAW,CAAC;UACzC,CAAC,CACA;SACJ,CAAC,OAAOI,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,iBAAiB,CAAC;UAChC,MAAMA,KAAK;;MACd;IACL;IAEEE,SAASA,CAACC,MAAc;MACtB;MACA;MACA,IAAI,CAACnB,QAAQ,CAACoB,KAAK,CAACP,IAAI,CAACM,MAAM,CAAC;MAChCF,OAAO,CAACI,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACrB,QAAQ,CAACoB,KAAK,CAAC;MACzD,IAAI,CAACpB,QAAQ,CAACe,IAAI,CAAC,IAAI,CAACjB,UAAU,CAAC;IACrC;IAEAwB,cAAcA,CAACH,MAAc;MAC3BA,MAAM,CAACI,QAAQ,GAAG,IAAI;MACtB,IAAI,CAACvB,QAAQ,CAACe,IAAI,CAAC,IAAI,CAACjB,UAAU,CAAC;IACrC;IAEC0B,aAAaA,CAACL,MAAc;MAC3B;MACA,IAAI,CAACnB,QAAQ,CAACoB,KAAK,CAACK,MAAM,CAAC,IAAI,CAACzB,QAAQ,CAACoB,KAAK,CAACM,OAAO,CAACP,MAAM,CAAC,EAAE,CAAC,CAAC;MAClEF,OAAO,CAACI,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAACrB,QAAQ,CAACoB,KAAK,CAAC;MAC9D,IAAI,CAACpB,QAAQ,CAACe,IAAI,CAAC,IAAI,CAACjB,UAAU,CAAC;IACrC;;uBAtDWF,aAAa,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAblC,aAAa;MAAAmC,OAAA,EAAbnC,aAAa,CAAAoC,IAAA;MAAAC,UAAA,EAFZ;IAAM;;SAEPrC,aAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}